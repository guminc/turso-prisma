/// refer to https://github.com/chrishoermann/zod-prisma-types for @zod validators

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider                 = "zod-prisma-types"
  output                   = "../types/generated"
  writeNullishInModelTypes = true
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Collection {
  id                      String    @id @default(cuid())
  name                    String
  max_items               Int
  max_batch_size          Int
  symbol                  String
  creator_address         String
  is_hidden               Boolean
  sort_order              Int
  is_mint_active          Boolean
  is_archetype            Boolean
  is_pending              Boolean
  discounts               String // JSON serialized as a string
  owner_alt_payout        String
  super_affiliate_payout  String
  contract_version        Int
  slug                    String
  mint_info               String // JSON serialized as a string
  socials                 String // JSON serialized as a string
  token_address           String
  token_address_lowercase String
  trait_counts            String // JSON serialized as a string
  avatar_uri              String
  banner_uri              String
  description             String
  hero_uri                String
  twitter                 String
  website                 String
  discord                 String
  num_items               Int
  num_owners              Int
  last_refreshed          DateTime
  mint_data               MintData?
  creator                 User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id                 String    @unique
  nfts                    Nft[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Nft {
  id                      String      @id @default(cuid())
  token_address           String
  token_address_lowercase String
  token_id                String
  attributes              String // JSON serialized as a string
  block_minted            Int
  contract_type           String
  description             String
  dna                     String
  edition                 Int
  image                   String
  image_url               String
  metadata                String // JSON serialized as a string
  name                    String
  network                 String
  old_image_url           String
  old_token_uri           String
  owner_of                String
  token_id_int            Int
  token_uri               String
  open_rarity             OpenRarity?
  collection              Collection  @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collection_id           String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model MintData {
  id                  String     @id @default(cuid())
  block_last_mint     Int
  date_last_mint      DateTime
  mints_last_1h       Int
  mints_last_12h      Int
  mints_last_24h      Int
  mints_last_7d       Int
  mints_last_1m       Int
  mints_last_6m       Int
  floor_price_raw     String
  floor_price_decimal Float
  all_time_raw        String
  all_time_decimal    Float
  last_12h_decimal    Float
  last_1h_decimal     Float
  last_24h_decimal    Float
  last_7d_decimal     Float
  last_1m_decimal     Float
  last_6m_decimal     Float
  date_last_sale      DateTime
  collection          Collection @relation(fields: [collection_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collection_id       String     @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model OpenRarity {
  id                String @id @default(cuid())
  rank              Int
  score             Float
  unique_attributes Int
  nft               Nft    @relation(fields: [nft_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nft_id            String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

/// @zod.import(["import { getAddress } from 'ethers'"])
model User {
  id          String  @id @default(cuid())
  address     String  @unique ///@zod.import(["import { getAddress } from 'ethers'"]).custom.use(z.string().refine((val) => getAddress(val), { message: 'is not a valid Ethereum address' }))
  avatar_uri  String? /// @zod.string.url({ message: "Invalid url" })
  banner_uri  String? /// @zod.string.url({ message: "Invalid url" })
  username    String? /// @zod.string.max(64, { message: "too lengthy" })
  description String? /// @zod.string.max(512, { message: "too long" })
  ens         String?
  status      String  @default("pending")

  collections Collection[]
  wallets     Wallet[]
  sessions    Session[]
  roles       Role[]
  connections Connection[]

  email    String?
  password Password?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Connection {
  id            String @id @default(cuid())
  provider_name String
  provider_id   String @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  @@unique([provider_name, provider_id])
  @@unique([provider_id, user_id])
}

model Password {
  hash String

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @unique
}

model Chain {
  id     Int    @id @unique
  slug   String @unique // "eth" || "sepolia"
  name   String @unique
  symbol String @unique

  is_testnet Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  wallet Wallet[]
}

model Wallet {
  id      String @id @default(cuid())
  address String @unique

  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner_id String

  chain    Chain @relation(fields: [chain_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chain_id Int

  sessions Session[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // non-unique foreign key
  @@index([owner_id])
}

model Session {
  id              String   @id @default(cuid())
  expiration_date DateTime

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String

  wallet    Wallet @relation(fields: [wallet_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  wallet_id String

  user_agent String  @default("")
  locale     String?
  ip_address String?
  nonce      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, user_agent])
  // non-unique foreign key
  @@index([user_id])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model MintSaleTransaction {
  id               String   @id @default(cuid())
  transaction_hash String
  block_number     Int
  timestamp        DateTime
  token_address    String
  value_decimal    Float
  value_raw        String
  from             String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model InstarevealCollection {
  id      String @id @default(cuid())
  address String
  paths   String // JSON serialized as a string

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Referral {
  id                  String   @id @default(cuid())
  collection_address  String
  referral_amount_eth String
  referral_amount_wei String
  affiliate           String
  transaction_hash    String
  minter_ens          String
  txn_value           String
  date                DateTime
  block_number        Int
  affiliate_ens       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
